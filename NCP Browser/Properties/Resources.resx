<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cwic_background" xml:space="preserve">
    <value>function handleClientPortRequest(a){console.log("Incoming new port:",a);var b=null,c=null,d=function(a){c=a},e=function(a){return c};if(!a.sender||!a.sender.id)throw{name:"port missing id",port:a};var f=a.sender.id,g="";f===location.host?(a.sender.tab.url?b=a.sender.tab.url:a.sender.url?b=a.sender.url:console.log("FAILED determining origin for port"),a.sender.tab.title?d(a.sender.tab.title):console.log("FAILED determining origin for port")):(g="Chrome",b="chrome-extension://"+f+"/",chrome.management.get(f,function(a){console.log("Info for port.sender.id:"),console.log(a),a.name?d(a.name):console.log("Strange: object has no name")}));var h=getnextlocalportid();console.log("local port id = "+h);var i=getHostnameFromUrl(b);console.log("portSenderUrl-&gt;hostname = "+i);var j={id:h,url:b,hostname:i};g&amp;&amp;(j.type=g),c&amp;&amp;(j.name=c),a.client=j,a.getportname=e,ports[h]=a,console.log(ports),a.onMessage.addListener(handleClientMessage),a.onDisconnect.addListener(handleClientDisconnect)}function handleClientMessage(a,b){var c=b.getportname();c&amp;&amp;c.length&gt;0&amp;&amp;(b.client.name=c),a.client=b.client,console.log("handleClientMessage from client:",a.client),a.ciscoChannelProperties&amp;&amp;console.log("initializing channel with props: ",a.ciscoChannelProperties);if(!a.ciscoSDKClientMessage&amp;&amp;!a.clientConnected)console.log("handleClientMessage ignoring unknown message");else{var d=a.ciscoSDKClientMessage.name,e=d==="encryptCucmPassword"?"*****":a.ciscoSDKClientMessage.content;console.log("ciscoSDKClientMessage '"+d+"' with content:",e);if(d==="releaseInstance"||a.clientConnected===!1){var f=ports[a.client.id];f.disconnect(),handleClientDisconnect(f);return}nativeport||connectNative();var g={ciscoChannelMessage:a};postToNative(g)}}function connectNative(){try{nativeport=chrome.runtime.connectNative(hostName)}catch(a){console.log("Failed connecting to native port"),console.log(a),nativeport=null,sendChannelDisconnectMessage(a);return}console.log("native port to host: "+hostName,nativeport),nativeport.onMessage.addListener(handleNativeMessage),nativeport.onDisconnect.addListener(function(){console.log("Received nativeport.onDisconnected"),nativeport=null,sendChannelDisconnectMessage(chrome.extension.lastError)})}function handleNativeMessage(a){var b=a;if(typeof a=="string")try{b=JSON.parse(a)}catch(c){console.log("Message from native side failed JSON.parse, discarding"),console.log(c);return}console.log("Received from native:",b);if(b.ciscoChannelMessage){var d=null;b.ciscoChannelMessage.ciscoSDKServerMessage&amp;&amp;(d={ciscoSDKServerMessage:b.ciscoChannelMessage.ciscoSDKServerMessage});if(!d){console.log("Message missing ciscoSDKServerMessage. Nothing to route to client");return}console.log("extracted ciscoSDKServerMessage '"+d.ciscoSDKServerMessage.name+"'");if(b.ciscoChannelMessage.client)if(b.ciscoChannelMessage.client.id){var e=b.ciscoChannelMessage.client.id,f=ports[e];f?f.postMessage(d):console.log("port ["+e+"] not found. Unable to route message.")}else console.log("Don't know how to route the message, missing ciscoChannelMessage.client.id");else broadcastToClients(d)}else console.log("Don't know how to parse the message that's not ciscoChannelMessage")}function handleClientDisconnect(a){delete ports[a.client.id];var b=Object.keys(ports).length;console.log("Client port destroyed. "+b+" client ports remaining.");if(nativeport){var c={ciscoChannelMessage:{client:a.client,clientConnected:!1}};postToNative(c),b===0&amp;&amp;(console.log("Last client port removed.  Disconnecting from native client."),nativeport.disconnect(),nativeport=null)}}function postToNative(a){console.log("posting message to native port"),hostName==="com.cisco.jabber.jsdk"&amp;&amp;delete a.ciscoChannelMessage.ciscoChannelProperties;try{nativeport.postMessage(a)}catch(b){console.log("exception posting to native port, assume it's dead:"),console.log(b),nativeport=null,sendChannelDisconnectMessage(b)}}function sendChannelDisconnectMessage(a){var b={ciscoChannelServerMessage:{name:"HostDisconnect",cause:a}};broadcastToClients(b)}function broadcastToClients(a){console.log("broadcast message:",a);if(Object.keys(ports).length&gt;0){console.log("ports:"),console.log(ports);for(var b in ports)if(ports[b])try{ports[b].postMessage(a)}catch(c){console.log(c),console.log("Failed posting server message to client port, discarding."),console.log(ports[b])}}else console.log("No connected client ports to broadcast on.")}function getnextlocalportid(){lastlocalportid=lastlocalportid+1;return CLIENT_ID_BASE+"."+lastlocalportid.toString()}function getHostnameFromUrl(a){var b=document.createElement("a");b.href=a;var c=b.hostname;return c}var ports={},CLIENT_ID_BASE=Math.floor(Math.random()*1e6+1).toString(),lastlocalportid=100,nativeport=null,hostName="com.cisco.jabber.jsdk";document.addEventListener("DOMContentLoaded",function(){console.log("Background: DomContentLoaded"),console.log("Extension URL: "+chrome.extension.getURL("")),console.log("document.domain: "+document.domain)}),chrome.runtime.onConnect.addListener(handleClientPortRequest),chrome.runtime.onConnectExternal.addListener(handleClientPortRequest);</value>
  </data>
  <data name="cwic_contentscript" xml:space="preserve">
    <value>cwic_ext=function(){function d(){var a=typeof arguments[0]=="boolean"?arguments[0]:!1,b=typeof arguments[0]=="string"?arguments[0]:arguments[1],d=typeof arguments[1]=="object"?arguments[1]:arguments[2];if(!a||a&amp;&amp;c){var e=new Date,f=("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+"."+("00"+e.getMilliseconds()).slice(-3)+" ";d?console.log("[cwic.ext] "+f+b,d):console.log("[cwic.ext] "+f+b)}}var a=null,b=null,c=!1;cwic_reply=function(a){var c="unknown";a.ciscoSDKServerMessage?(c=a.ciscoSDKServerMessage.name,d(!0,"send ciscoSDKServerMessage '"+c+"' to client")):a.ciscoChannelServerMessage?(c=a.ciscoChannelServerMessage.name,d(!0,"send ciscoChannelServerMessage '"+c+"' to client")):d("Unknown message from background page.",a),b?b.contentWindow.postMessage(a,location.origin):typeof cwic_plugin!="undefined"?cwic_plugin.directReply(a):d("No responseHandler or iframe window to send reply on.")},sendChannelDisconnectMessage=function(b){a=null;var c={ciscoChannelServerMessage:{name:"ChannelDisconnect",cause:b}};cwic_reply(c)},connectPort=function(b){if(a!==null)d("Already connected to Cisco extension: "+b);else{try{a=chrome.runtime.connect(b,{name:"ContentScript"})}catch(c){sendChannelDisconnectMessage(c);return}a.onMessage.addListener(cwic_reply),a.onDisconnect.addListener(function(a){sendChannelDisconnectMessage("Port to background script disconnected")}),d(!0,"Content script connected to Cisco extension: "+b)}};return{relay:function(b){var e=b.ciscoSDKClientMessage.name;if(a===null&amp;&amp;e==="init"){d("initializing extension channel",b.ciscoChannelProperties);var f=b.ciscoChannelProperties.cwicExtId;c=b.ciscoChannelProperties.verbose,connectPort(f)}if(a){d(!0,"forward ciscoSDKClientMessage '"+e+"' to background script");try{a.postMessage(b)}catch(g){sendChannelDisconnectMessage(g)}}else sendChannelDisconnectMessage("Content Script Not Initialized")},init:function(a){c=a.ciscoChannelProperties.verbose,b=document.getElementById(a.ciscoChannelProperties.objectId),b.contentWindow.addEventListener("message",function(a){a.source==window&amp;&amp;!!a.data.ciscoSDKClientMessage&amp;&amp;cwic_ext.relay(a.data)},!1),this.relay(event.data)}}}(),typeof cwic_plugin!="undefined"&amp;&amp;typeof cwic_plugin.directReply!="undefined"?console.log("[cwic.ext] loaded in extension: "+chrome.runtime.id):(console.log("[cwic.ext] waiting for 'init' as extension: "+chrome.runtime.id),window.addEventListener("message",function(a){a.source==window&amp;&amp;!!a.data.ciscoSDKClientMessage&amp;&amp;(a.data.ciscoSDKClientMessage.name=="init"&amp;&amp;a.data.ciscoChannelProperties.cwicExtId==chrome.runtime.id?cwic_ext.init(a.data):console.log("[cwic.ext] ciscoSDKClientMessage received on main window but it is not 'init' or not for our ext id.",a.data))},!1));</value>
  </data>
  <data name="cwic_plugin" xml:space="preserve">
    <value>var cwic_plugin=function(){function c(){var a=typeof arguments[0]=="boolean"?arguments[0]:!1,c=typeof arguments[0]=="string"?arguments[0]:arguments[1],d=typeof arguments[1]=="object"?arguments[1]:arguments[2];if(!a||a&amp;&amp;b.verbose){var e=new Date,f=("0"+e.getHours()).slice(-2)+":"+("0"+e.getMinutes()).slice(-2)+":"+("0"+e.getSeconds()).slice(-2)+"."+("00"+e.getMilliseconds()).slice(-3)+" ";d?console.log("[cwic.ext] "+f+c,d):console.log("[cwic.ext] "+f+c)}}var a=$.noop,b={};loadExtProps=function(){var a=new XMLHttpRequest;a.onreadystatechange=function(){a.readyState==4&amp;&amp;$.extend(b,JSON.parse(a.responseText))},a.open("GET","chrome-extension://"+b.cwicExtId+"/extProps.json",!1);try{a.send()}catch(d){c("Couldn not load extProps.json",d)}},append_iframe=function(){var a=document.createElement("iframe");a.id=b.objectId,a.style.display="none",a.onload=function(){c(!0,"append_iframe onload"),$("#"+b.objectId)[0].contentWindow.addEventListener("message",receiveMessage,!1);try{window.postMessage(initMsg,location.origin)}catch(a){c("Failed posting message to "+b.objectId,a)}},a.onerror=function(){c("Could not load iframe.")},document.body.appendChild(a)},append_contentscript=function(){var a=document.createElement("script");a.id=b.objectId,a.src="chrome-extension://"+b.cwicExtId+"/contentscript.js",a.onload=function(){c(!0,"append_contentscript onload");try{cwic_ext.relay(initMsg)}catch(a){c(a)}},a.onerror=function(){c("Could not load contentscript.")},document.head.appendChild(a)},receiveMessage=function(d){d.source!=window?c("Received message from unexpected source on "+b.objectId,d):d.data.ciscoChannelServerMessage||d.data.ciscoSDKServerMessage?a(d.data):d.data.ciscoSDKClientMessage||c("Received unexpected message data on "+b.objectId,d.data)};return{about:function(){return b},init:function(d,e){if(!$.isFunction(d))c("cwic ext cannot load with invalid response handler");else{c("loaded with origin: "+location.origin);try{$("#"+b.objectId).remove()}catch(f){}a=d,b=e,loadExtProps(),initMsg={ciscoSDKClientMessage:{name:"init",messageId:"0"},ciscoChannelProperties:b},location.protocol==="chrome-extension:"?append_contentscript():append_iframe()}},sendRequest:function(a){!a.ciscoSDKClientMessage||(typeof cwic_ext!="undefined"&amp;&amp;$.isFunction(cwic_ext.relay)?cwic_ext.relay(a):$("#"+b.objectId)[0].contentWindow.postMessage(a,location.origin))},directReply:function(b){a(b)}}}();</value>
  </data>
</root>